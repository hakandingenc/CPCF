#lang racket

(require redex
         "../src/languages.rkt"
         "../src/translation.rkt"
         "../src/utils.rkt")

(default-language CPCF-mix*)

(test-equal (term (guard-free b/o 1 "s" x "x" (flat 1) "k" 1)) 1)
(test-equal (term (guard-free b/o x "s" x "x" (flat 1) "k" 1)) (term (mon ("x" "s" "k") (flat-ob (own 1 "k") ("x")) (own 1 "x"))))
(test-equal (term (guard-free b/o x "s" x "x" (flat 1) "k" 5)) (term (mon ("x" "s" "k") (flat-ob (own 1 "k") ("x")) (own 5 "x"))))

(define id (term (λ (x : I) x)))
(define id0-κ (term (-> (flat (λ (x : I) (zero? x))) (flat (λ (x : I) (zero? x))))))
(test-equal (term (decorate b/o (let* () 1))) (term 1))
(test-equal (term (decorate b/o (let* () x))) (term x))
(test-equal (term (decorate b/o (let* () (λ (x : I) x)))) (term (λ (x : I) x)))
(test-equal (term (decorate b/o (let* () (λ (y : I) x)))) (term (λ (y : I) x)))
(test-equal (term (decorate b/o (let* ([f ,id0-κ ,id]) 1))) (term 1))
(test-equal (term (decorate b/o (let* ([f ,id0-κ ,id]) (λ (x : I) x)))) (term (λ (x : I) x)))
(test-equal (term (decorate b/o (let* ([f ,id0-κ ,id]) (λ (y : I) x)))) (term (λ (y : I) x)))
(test-equal (term (decorate b/o (let* ([n (flat (λ (x : I) (zero? x))) 0]) n)))
            (term (mon ("n" ,(unowned-label) "n")
                       (flat-ob (own (λ (x : I) (zero? x)) "n") ("n"))
                       (own 0 "n"))))
(test-equal (term (decorate b/o (let* ([f ,id0-κ ,id]) f)))
            (term (mon ("f" ,(unowned-label) "f")
                       (-> (flat-ob (own (λ (x : I) (zero? x)) "f") (,(unowned-label))) (flat-ob (own (λ (x : I) (zero? x)) "f") ("f")))
                       (own (λ (x : I) x) "f"))))
(test-equal (term (decorate b/o (let* ([n (flat (λ (x : I) (zero? (- x 1))))
                                          1]
                                       [f (-> (flat (λ (x : I) (zero? x)))
                                              (flat (λ (x : I) (zero? (- x 1)))))
                                          (λ (x : I) n)])
                                  (f 0))))
            (term ((mon ("f" ,(unowned-label) "f")
                        (-> (flat-ob (own (λ (x : I) (zero? x)) "f") (,(unowned-label)))
                            (flat-ob (own (λ (x : I) (zero? (- x 1))) "f") ("f")))
                        (own (λ (x : I) (mon ("n" "f" "n") (flat-ob (own (λ (x : I) (zero? (- x 1))) "n") ("n")) (own 1 "n"))) "f")) 0)))
(test-equal (term (decorate b/o (let* ([n (flat (λ (x : I) (zero? (- x 1))))
                                          1]
                                       [f (->d (flat (λ (x : I) (or (zero? x) (zero? (- x 1)))))
                                               (λ (input : I) (flat (λ (x : I) (if (zero? input)
                                                                                   (zero? (- x 1))
                                                                                   (zero? x))))))
                                          (λ (x : I) n)])
                                  (f 0))))
            (term ((mon ("f" ,(unowned-label) "f")
                        (->d (flat-ob (own (λ (x : I) (or (zero? x) (zero? (- x 1)))) "f") (,(unowned-label)))
                             (λ (input : I) (flat-ob (own (λ (x : I) (if (zero? input)
                                                                         (zero? (- x 1))
                                                                         (zero? x)))
                                                          "f") ("f"))))
                        (own (λ (x : I) (mon ("n" "f" "n") (flat-ob (own (λ (x : I) (zero? (- x 1))) "n") ("n")) (own 1 "n"))) "f")) 0)))
(test-equal (term (decorate b/o (let* ([n (flat (λ (x : I) (zero? (- x 1))))
                                          1]
                                       [f (-> (flat (λ (x : I) (zero? x)))
                                              (flat (λ (x : I) (zero? (- x 1)))))
                                          (λ (x : I) 0)])
                                  (f n))))
            (term ((mon ("f" ,(unowned-label) "f")
                        (-> (flat-ob (own (λ (x : I) (zero? x)) "f") (,(unowned-label)))
                            (flat-ob (own (λ (x : I) (zero? (- x 1))) "f") ("f")))
                        (own (λ (x : I) 0) "f")) (mon ("n" ,(unowned-label) "n") (flat-ob (own (λ (x : I) (zero? (- x 1))) "n") ("n")) (own 1 "n")))))

(test-equal (term (decorate b/o (let* ([m (flat (λ (x : I) (zero? x))) 0]
                                       [n (flat (λ (x : I) (zero? (- x m)))) 0]) n)))
            (term (mon ("n" ,(unowned-label) "n")
                       (flat-ob (own (λ (x : I) (zero? (- x (mon ("m" "n" "m") (flat-ob (own (λ (x : I) (zero? x)) "m") ("m")) (own 0 "m"))))) "n") ("n"))
                       (own 0 "n"))))







(test-equal (term (guard-free b 1 "s" x "x" (flat 1) "k" 1)) 1)
(test-equal (term (guard-free b x "s" x "x" (flat 1) "k" 1)) (term (mon ("x" "s" "k") (flat 1) 1)))
(test-equal (term (guard-free b x "s" x "x" (flat 1) "k" 5)) (term (mon ("x" "s" "k") (flat 1) 5)))
(test-equal (term (decorate b (let* () 1))) (term 1))
(test-equal (term (decorate b (let* () x))) (term x))
(test-equal (term (decorate b (let* () (λ (x : I) x)))) (term (λ (x : I) x)))
(test-equal (term (decorate b (let* () (λ (y : I) x)))) (term (λ (y : I) x)))
(test-equal (term (decorate b (let* ([f ,id0-κ ,id]) 1))) (term 1))
(test-equal (term (decorate b (let* ([f ,id0-κ ,id]) (λ (x : I) x)))) (term (λ (x : I) x)))
(test-equal (term (decorate b (let* ([f ,id0-κ ,id]) (λ (y : I) x)))) (term (λ (y : I) x)))
(test-equal (term (decorate b (let* ([n (flat (λ (x : I) (zero? x))) 0]) n)))
            (term (mon ("n" ,(unowned-label) "n")
                       (flat (λ (x : I) (zero? x)))
                       0)))
(test-equal (term (decorate b (let* ([f ,id0-κ ,id]) f)))
            (term (mon ("f" ,(unowned-label) "f")
                       (-> (flat (λ (x : I) (zero? x))) (flat (λ (x : I) (zero? x))))
                       (λ (x : I) x))))
(test-equal (term (decorate b (let* ([n (flat (λ (x : I) (zero? (- x 1))))
                                        1]
                                     [f (-> (flat (λ (x : I) (zero? x)))
                                            (flat (λ (x : I) (zero? (- x 1)))))
                                        (λ (x : I) n)])
                                (f 0))))
            (term ((mon ("f" ,(unowned-label) "f")
                        (-> (flat (λ (x : I) (zero? x)))
                            (flat (λ (x : I) (zero? (- x 1)))))
                        (λ (x : I) (mon ("n" "f" "n") (flat (λ (x : I) (zero? (- x 1)))) 1))) 0)))
(test-equal (term (decorate b (let* ([n (flat (λ (x : I) (zero? (- x 1))))
                                        1]
                                     [f (->d (flat (λ (x : I) (or (zero? x) (zero? (- x 1)))))
                                             (λ (input : I) (flat (λ (x : I) (if (zero? input)
                                                                                 (zero? (- x 1))
                                                                                 (zero? x))))))
                                        (λ (x : I) n)])
                                (f 0))))
            (term ((mon ("f" ,(unowned-label) "f")
                        (->d (flat (λ (x : I) (or (zero? x) (zero? (- x 1)))))
                             (λ (input : I) (flat (λ (x : I) (if (zero? input)
                                                                 (zero? (- x 1))
                                                                 (zero? x))))))
                        (λ (x : I) (mon ("n" "f" "n") (flat (λ (x : I) (zero? (- x 1)))) 1))) 0)))
(test-equal (term (decorate b (let* ([n (flat (λ (x : I) (zero? (- x 1))))
                                        1]
                                     [f (-> (flat (λ (x : I) (zero? x)))
                                            (flat (λ (x : I) (zero? (- x 1)))))
                                        (λ (x : I) 0)])
                                (f n))))
            (term ((mon ("f" ,(unowned-label) "f")
                        (-> (flat (λ (x : I) (zero? x)))
                            (flat (λ (x : I) (zero? (- x 1)))))
                        (λ (x : I) 0)) (mon ("n" ,(unowned-label) "n") (flat (λ (x : I) (zero? (- x 1)))) 1))))

(test-equal (term (decorate b (let* ([m (flat (λ (x : I) (zero? x))) 0]
                                     [n (flat (λ (x : I) (zero? (- x m)))) 0]) n)))
            (term (mon ("n" ,(unowned-label) "n")
                       (flat (λ (x : I) (zero? (- x (mon ("m" "n" "m") (flat (λ (x : I) (zero? x))) 0)))))
                       0)))
